#! /usr/bin/env python
# -*- coding: utf-8 -*- 
#
# Support module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Jun 04, 2017 01:29:25 AM
#    Jun 07, 2017 11:28:41 AM


import sys, support

try:
    from Tkinter import *
    import tkFileDialog
    import tkMessageBox
except ImportError:
    from tkinter import *
    from tkinter import filedialog as tkFileDialog
    from tkinter import tkmessagebox as tkMessageBox

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

def set_Tk_var():
    global datalstChargeWalletAddress
    datalstChargeWalletAddress = StringVar()
    global dataChargeWallet
    dataChargeWallet = StringVar()
    global dataBalance
    dataBalance = StringVar()
    global dataSendGeneChainCoin
    dataSendGeneChainCoin = StringVar()
    global datalstSendDataChainCoinAddress
    datalstSendDataChainCoinAddress = StringVar()
    global datalstTransaction
    datalstTransaction = StringVar()
    global GeneChainCoin
    GeneChainCoin = object
    global curAddress
    curAddress = ""
    
def onClick_btnChargeWallet():
    support.printD('wallet01_support.onClick_ChargeWallet')
    i = w.lstSendGeneChainCoinAddress.curselection()
    support.printD(i)
    try: 
        curaddress = w.lstSendGeneChainCoinAddress.get(i)
        support.printD(curaddress)
        qty = float( dataChargeWallet.get() )
        gccMiner = getGccMiners()[0]
        support.printD("gccminer")
        support.printD(gccMiner)
        result = tkMessageBox.askokcancel(
            "Your Sure ?",
            "You, really want to charge '"+dataChargeWallet.get()+"' GCC on address "+curaddress+" wallet ?")
        if result:
            support.printD(GeneChainCoin.grant( curaddress, "receive,send" ) )
            support.printD(GeneChainCoin.sendasset( curaddress, "GCC", qty ) )
            lstSendGeneChainCoinAddress_load(curAddress)
    except:
        support.printD("Any row currently selected")
    sys.stdout.flush()

def onBtn1Rls_lstSendGeneChainCoinAddress(p1):
    support.printD('wallet01_support.onBtn1Rls_lstSendGeneChainCoinAddress')
    i = w.lstSendGeneChainCoinAddress.curselection()
    #print(i)
    curaddress = w.lstSendGeneChainCoinAddress.get(i)
    support.printD(curaddress)
    balances = GeneChainCoin.getmultibalances("*","GCC")
    try:
        print(balances[curaddress][0]['qty'])
        dataBalance.set(balances[curaddress][0]['qty'])
    except:
        dataBalance.set('- No Wallet -')
    sys.stdout.flush()

def onBtn1Rls_lstTransaction(p1):
    print('wallet01_support.onBtn1Rls_lstTransaction')
    sys.stdout.flush()

def onClick_btnCreateNewAddress():
    support.printD('wallet01_support.onClick_btnCreateNewAddress')
    newAddress = GeneChainCoin.getnewaddress()
    support.printD(newAddress)
    GeneChainCoin.grant( newAddress, "receive,send")
    w.lstSendGeneChainCoinAddress.insert( END, newAddress )
    w.lstSendGeneChainCoinAddress.selection_clear(0,END)
    sys.stdout.flush()

def onClick_btnCreateWallet():
    support.printD('wallet01_support.onClick_btnCreateWallet')
    i = w.lstSendGeneChainCoinAddress.curselection()
    #print(i)
    curaddress = w.lstSendGeneChainCoinAddress.get(i)
    support.printD(curaddress)
    support.printD(GeneChainCoin.grant( curaddress, "receive,send" ) )
    support.printD(GeneChainCoin.sendasset( curaddress, "GCC", 0 ) )
    sys.stdout.flush()

def onClick_btnExit():
    print('wallet01_support.onClick_btnExit')
    destroy_window()
    sys.stdout.flush()

def onClick_btnListAddresses():
    print('wallet01_support.onClick_btnListAddresses')
    sys.stdout.flush()

def onClick_btnSendGeneChainCoin():
    support.printD('wallet01_support.onClick_btnSendGeneChainCoin')
    i = w.lstSendGeneChainCoinAddress.curselection()
    support.printD(i)
    curaddress = w.lstSendGeneChainCoinAddress.get(i)
    support.printD(curaddress)
    qty = float( dataSendGeneChainCoin.get() )
    gccMiner = getGccMiners()[0]
    support.printD("gccminer")
    support.printD(gccMiner)
    result = tkMessageBox.askokcancel(
        "Your Sure ?",
        "You, "+gccMiner+" Address really want to transfer  '"+dataSendGeneChainCoin.get()+"' GCC on address "+curaddress+" ?")
    if result:
        support.printD( GeneChainCoin.sendasset( curaddress, "GCC", qty ) )
        lstSendGeneChainCoinAddress_load(curAddress)
    sys.stdout.flush()

def onClick_btnUpdateBalance():
    print('wallet01_support.onClick_btnUpdateBalance')
    #GeneChainCoin = support.getApiCoin("pippo")
    #GeneChainCoin.subscribe("GCC")
    support.printD(GeneChainCoin.listwallettransactions(1))
    support.printD(GeneChainCoin.listassettransactions("GCC"))
    support.printD("---------------")
    for t in GeneChainCoin.listassettransactions("GCC"):
        support.printD(t)
    lstSendGeneChainCoinAddress_load(curAddress)
    sys.stdout.flush()

def init(top, gui, *args, **kwargs):
    global w, top_level, root, GeneChainCoin, curAddress
    w = gui
    top_level = top
    root = top
    print("init")
    print(args)
    print(kwargs)
    curAddress = args[0]
    print(curAddress)
    GeneChainCoin = support.getApiCoin("password")
    lstSendGeneChainCoinAddress_load(curAddress)
    
def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

# ---------------------------------------------

def lstSendGeneChainCoinAddress_load(curAddress):
    support.printD("wallet01_support.lstSendGeneChainCoinAddress_load")
    # load Data from the GeneChain
    global GeneChainCoin
    addressesAll = GeneChainCoin.listaddresses()
    print(addressesAll)
    w.lstSendGeneChainCoinAddress.delete(0,END)
    for a in addressesAll:
        if curAddress == a["address"]:
            w.lstSendGeneChainCoinAddress.insert( END, a["address"]+"* Your Current Address")
        else:
            w.lstSendGeneChainCoinAddress.insert( END, a["address"] )
    w.lstSendGeneChainCoinAddress.selection_clear(0,END)
    print(GeneChainCoin.listpermissions("GCC.*"))
    print(GeneChainCoin.getmultibalances("*","GCC"))
    balances = GeneChainCoin.getmultibalances("*","GCC")
    print(balances['total'][0]['qty'])
    dataBalance.set(balances['total'][0]['qty'])
    gccMiner = getGccMiners()[0]
    print(gccMiner)
    
def getGccMiners():
    support.printD("wallet01_support.getGccMiner")
    # load Data from the GeneChain
    global GeneChainCoin
    print(GeneChainCoin.listaddresses())
    print(GeneChainCoin.listpermissions('issue'))
    addressesAll = GeneChainCoin.listaddresses()
    addressesIssue = GeneChainCoin.listpermissions('issue')
    gccMiners = []
    for a in addressesIssue:
        if any(d['address'] == a["address"] for d in addressesAll):
            gccMiners.append(a["address"])
            print (a)
    print(gccMiners)
    if len(gccMiners) != 1:
        support.printD("Attenzione ! l'elenco dei miners non Ã¨ pari ad 1.")
    return gccMiners
    
if __name__ == '__main__':
    import wallet01
    wallet01.vp_start_gui()





